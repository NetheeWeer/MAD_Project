// Generated by view binder compiler. Do not edit!
package com.example.dashitem.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.dashitem.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityUpdateorderBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button additemsbuttonupdate;

  @NonNull
  public final Button deleteBtn;

  @NonNull
  public final ImageView imageView3;

  @NonNull
  public final Toolbar toolbar5;

  @NonNull
  public final EditText updateitemaddress;

  @NonNull
  public final EditText updateitemcolor;

  @NonNull
  public final EditText updateitemname;

  @NonNull
  public final EditText updateitemquantiy;

  @NonNull
  public final EditText updateitemsize;

  private ActivityUpdateorderBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button additemsbuttonupdate, @NonNull Button deleteBtn,
      @NonNull ImageView imageView3, @NonNull Toolbar toolbar5, @NonNull EditText updateitemaddress,
      @NonNull EditText updateitemcolor, @NonNull EditText updateitemname,
      @NonNull EditText updateitemquantiy, @NonNull EditText updateitemsize) {
    this.rootView = rootView;
    this.additemsbuttonupdate = additemsbuttonupdate;
    this.deleteBtn = deleteBtn;
    this.imageView3 = imageView3;
    this.toolbar5 = toolbar5;
    this.updateitemaddress = updateitemaddress;
    this.updateitemcolor = updateitemcolor;
    this.updateitemname = updateitemname;
    this.updateitemquantiy = updateitemquantiy;
    this.updateitemsize = updateitemsize;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityUpdateorderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityUpdateorderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_updateorder, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityUpdateorderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.additemsbuttonupdate;
      Button additemsbuttonupdate = ViewBindings.findChildViewById(rootView, id);
      if (additemsbuttonupdate == null) {
        break missingId;
      }

      id = R.id.deleteBtn;
      Button deleteBtn = ViewBindings.findChildViewById(rootView, id);
      if (deleteBtn == null) {
        break missingId;
      }

      id = R.id.imageView3;
      ImageView imageView3 = ViewBindings.findChildViewById(rootView, id);
      if (imageView3 == null) {
        break missingId;
      }

      id = R.id.toolbar5;
      Toolbar toolbar5 = ViewBindings.findChildViewById(rootView, id);
      if (toolbar5 == null) {
        break missingId;
      }

      id = R.id.updateitemaddress;
      EditText updateitemaddress = ViewBindings.findChildViewById(rootView, id);
      if (updateitemaddress == null) {
        break missingId;
      }

      id = R.id.updateitemcolor;
      EditText updateitemcolor = ViewBindings.findChildViewById(rootView, id);
      if (updateitemcolor == null) {
        break missingId;
      }

      id = R.id.updateitemname;
      EditText updateitemname = ViewBindings.findChildViewById(rootView, id);
      if (updateitemname == null) {
        break missingId;
      }

      id = R.id.updateitemquantiy;
      EditText updateitemquantiy = ViewBindings.findChildViewById(rootView, id);
      if (updateitemquantiy == null) {
        break missingId;
      }

      id = R.id.updateitemsize;
      EditText updateitemsize = ViewBindings.findChildViewById(rootView, id);
      if (updateitemsize == null) {
        break missingId;
      }

      return new ActivityUpdateorderBinding((ConstraintLayout) rootView, additemsbuttonupdate,
          deleteBtn, imageView3, toolbar5, updateitemaddress, updateitemcolor, updateitemname,
          updateitemquantiy, updateitemsize);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
