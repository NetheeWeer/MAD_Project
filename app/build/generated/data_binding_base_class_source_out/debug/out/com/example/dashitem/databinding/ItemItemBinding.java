// Generated by view binder compiler. Do not edit!
package com.example.dashitem.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.dashitem.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final CardView card;

  @NonNull
  public final TextView tvitemaddress;

  @NonNull
  public final TextView tvitemcolor;

  @NonNull
  public final TextView tvitemname;

  @NonNull
  public final TextView tvitemquantity;

  @NonNull
  public final TextView tvitemsize;

  private ItemItemBinding(@NonNull CardView rootView, @NonNull CardView card,
      @NonNull TextView tvitemaddress, @NonNull TextView tvitemcolor, @NonNull TextView tvitemname,
      @NonNull TextView tvitemquantity, @NonNull TextView tvitemsize) {
    this.rootView = rootView;
    this.card = card;
    this.tvitemaddress = tvitemaddress;
    this.tvitemcolor = tvitemcolor;
    this.tvitemname = tvitemname;
    this.tvitemquantity = tvitemquantity;
    this.tvitemsize = tvitemsize;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      CardView card = (CardView) rootView;

      id = R.id.tvitemaddress;
      TextView tvitemaddress = ViewBindings.findChildViewById(rootView, id);
      if (tvitemaddress == null) {
        break missingId;
      }

      id = R.id.tvitemcolor;
      TextView tvitemcolor = ViewBindings.findChildViewById(rootView, id);
      if (tvitemcolor == null) {
        break missingId;
      }

      id = R.id.tvitemname;
      TextView tvitemname = ViewBindings.findChildViewById(rootView, id);
      if (tvitemname == null) {
        break missingId;
      }

      id = R.id.tvitemquantity;
      TextView tvitemquantity = ViewBindings.findChildViewById(rootView, id);
      if (tvitemquantity == null) {
        break missingId;
      }

      id = R.id.tvitemsize;
      TextView tvitemsize = ViewBindings.findChildViewById(rootView, id);
      if (tvitemsize == null) {
        break missingId;
      }

      return new ItemItemBinding((CardView) rootView, card, tvitemaddress, tvitemcolor, tvitemname,
          tvitemquantity, tvitemsize);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
